{"ast":null,"code":"var _jsxFileName = \"D:\\\\GidHub Progects\\\\REACT\\\\goit-react-hw-03-image-finder\\\\src\\\\components\\\\modal\\\\Modal.js\";\nimport { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport s from './Modal.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modalRoot = document.querySelector('#modal-root');\n\nclass Modal extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        this.props.onClose();\n      }\n    };\n\n    this.handleBackdropClick = event => {\n      if (event.currentTarget === event.target) {\n        this.props.onClose();\n      }\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  render() {\n    return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.overlay,\n      onClick: this.handleBackdropClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.modal,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.props.largeImageURL,\n          alt: this.props.alt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), modalRoot);\n  }\n\n}\n\nModal.propTypes = {\n  largeImageURL: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  onClick: PropTypes.func\n};\nexport default Modal;","map":{"version":3,"sources":["D:/GidHub Progects/REACT/goit-react-hw-03-image-finder/src/components/modal/Modal.js"],"names":["Component","createPortal","PropTypes","s","modalRoot","document","querySelector","Modal","handleKeyDown","event","code","props","onClose","handleBackdropClick","currentTarget","target","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","overlay","modal","largeImageURL","alt","propTypes","string","isRequired","onClick","func"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA8B,WAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,oBAAd;;AAEA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAlB;;AAEA,MAAMC,KAAN,SAAoBP,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAQ9BQ,aAR8B,GAQdC,KAAK,IAAI;AACrB,UAAIA,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;AAC7B,aAAKC,KAAL,CAAWC,OAAX;AACC;AACJ,KAZ6B;;AAAA,SAc9BC,mBAd8B,GAcRJ,KAAK,IAAI;AAC3B,UAAIA,KAAK,CAACK,aAAN,KAAwBL,KAAK,CAACM,MAAlC,EAA0C;AAC1C,aAAKJ,KAAL,CAAWC,OAAX;AACC;AACA,KAlByB;AAAA;;AAC1BI,EAAAA,iBAAiB,GAAG;AACpBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKV,aAAxC;AACC;;AAELW,EAAAA,oBAAoB,GAAG;AACnBF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsC,KAAKZ,aAA3C;AACH;;AAaGa,EAAAA,MAAM,GAAG;AACT,wBAAOpB,YAAY,eACf;AAAK,MAAA,SAAS,EAAEE,CAAC,CAACmB,OAAlB;AAA2B,MAAA,OAAO,EAAE,KAAKT,mBAAzC;AAAA,6BACA;AAAK,QAAA,SAAS,EAAEV,CAAC,CAACoB,KAAlB;AAAA,+BACA;AAAK,UAAA,GAAG,EAAE,KAAKZ,KAAL,CAAWa,aAArB;AAAoC,UAAA,GAAG,EAAE,KAAKb,KAAL,CAAWc;AAApD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADe,EAMfrB,SANe,CAAnB;AAQC;;AA7ByB;;AAgC9BG,KAAK,CAACmB,SAAN,GAAkB;AACdF,EAAAA,aAAa,EAAEtB,SAAS,CAACyB,MAAV,CAAiBC,UADlB;AAEdH,EAAAA,GAAG,EAAEvB,SAAS,CAACyB,MAAV,CAAiBC,UAFR;AAGdC,EAAAA,OAAO,EAAE3B,SAAS,CAAC4B;AAHL,CAAlB;AAMA,eAAevB,KAAf","sourcesContent":["import { Component } from 'react';\r\nimport { createPortal }  from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Modal.module.css';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nclass Modal extends Component {\r\n    componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n    }\r\n\r\ncomponentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n}\r\nhandleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n    this.props.onClose();\r\n    }\r\n};\r\n\r\nhandleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n    this.props.onClose();\r\n    }\r\n    };\r\n\r\n    render() {\r\n    return createPortal(\r\n        <div className={s.overlay} onClick={this.handleBackdropClick}>\r\n        <div className={s.modal}>\r\n        <img src={this.props.largeImageURL} alt={this.props.alt} />\r\n        </div>\r\n        </div>,\r\n        modalRoot\r\n    );\r\n    }\r\n}\r\n\r\nModal.propTypes = {\r\n    largeImageURL: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nexport default Modal;"]},"metadata":{},"sourceType":"module"}